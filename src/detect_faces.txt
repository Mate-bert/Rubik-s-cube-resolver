#include <opencv2/opencv.hpp>
#include <iostream>
#include <fstream>
#include <map>

using namespace cv;
using namespace std;

// Taille du carré de ROI centré sur l’image
const int roi_size = 420;

std::map<std::string, std::pair<cv::Scalar, cv::Scalar>> color_ranges = {
    {"red",    {cv::Scalar(0, 100, 100),   cv::Scalar(10, 255, 255)}},
    {"orange", {cv::Scalar(11, 100, 100),  cv::Scalar(22, 255, 255)}},
    {"yellow", {cv::Scalar(23, 100, 100),  cv::Scalar(34, 255, 255)}},
    {"green",  {cv::Scalar(35, 80, 80),    cv::Scalar(85, 255, 255)}},
    {"blue",   {cv::Scalar(86, 100, 100),  cv::Scalar(130, 255, 255)}},
    {"white",  {cv::Scalar(0, 0, 200),     cv::Scalar(180, 40, 255)}}
};

bool is_valid_face(const std::vector<cv::Point>& approx, double area) {
    if (approx.size() != 4) return false;
    if (!cv::isContourConvex(approx)) return false;
    if (area < 1000) return false;
    return true;
}

void detect_faces(cv::Mat& image, const std::map<std::string, std::pair<cv::Scalar, cv::Scalar>>& ranges) {
    cv::Mat hsv;
    cv::cvtColor(image, hsv, cv::COLOR_BGR2HSV);

    // Calcul du ROI centré
    cv::Point image_center(image.cols / 2, image.rows / 2);
    int x = std::max(0, image_center.x - roi_size / 2);
    int y = std::max(0, image_center.y - roi_size / 2);
    int w = std::min(roi_size, image.cols - x);
    int h = std::min(roi_size, image.rows - y);
    cv::Rect roi(x, y, w, h);
    rectangle(image, roi, Scalar(0, 255, 255), 1);

    int face_idx = 0;
    for (const auto& [name, range] : ranges) {
        cv::Mat mask, roi_mask;
        cv::inRange(hsv, range.first, range.second, mask);
        roi_mask = mask(roi).clone();

        // Nettoyage du masque
        cv::Mat closed;
        morphologyEx(roi_mask, closed, MORPH_CLOSE, getStructuringElement(MORPH_RECT, Size(5, 5)));
        morphologyEx(closed, closed, MORPH_OPEN, getStructuringElement(MORPH_RECT, Size(3, 3)));
        imshow("Masque - " + name, roi_mask);

        // Détection de contours
        std::vector<std::vector<cv::Point>> contours;
        cv::findContours(closed, contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);

        for (const auto& contour : contours) {
            double area = contourArea(contour);
            std::vector<cv::Point> approx;
            approxPolyDP(contour, approx, 0.04 * arcLength(contour, true), true);

            if (!is_valid_face(approx, area)) continue;

            for (auto& pt : approx) pt += roi.tl();

            for (int i = 0; i < 4; ++i) {
                line(image, approx[i], approx[(i + 1) % 4], Scalar(0, 255, 0), 2);
                circle(image, approx[i], 3, Scalar(0, 0, 255), FILLED);
                putText(image, "F" + to_string(face_idx) + "-P" + to_string(i), approx[i] + Point(2, -2),
                        FONT_HERSHEY_SIMPLEX, 0.5, Scalar(255, 255, 255), 1);
            }

            // Sauvegarde des coordonnées
            std::ofstream file("faces.txt", std::ios::app);
            if (file.is_open()) {
                file << "Face " << face_idx << " - " << name << ":\n";
                for (const auto& pt : approx) file << pt.x << " " << pt.y << "\n";
                file.close();
            }

            face_idx++;
        }
    }
}

int main(int argc, char** argv) {
    cv::Mat image = cv::imread("data/raw/3face_2.jpg");
    if (image.empty()) {
        std::cerr << "Erreur de chargement de l'image\n";
        return -1;
    }

    detect_faces(image, color_ranges);

    cv::imshow("Faces détectées", image);
    cv::waitKey(0);
    return 0;
}